<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="$USER_HOME$/Inbox/DeployParameterXml/Staging" timestamp="1547983161627">
        <mark key="[" line="21" column="81" />
        <mark key="]" line="21" column="100" />
        <mark key="." line="26" column="66" />
        <mark key="^" line="26" column="66" />
      </file>
      <file name="C:/dev/git/bartender/Buildsoft.Bartender.Business/TradePackagesLifecyle/TradePackageLifecycleService.cs" timestamp="1545178431693">
        <mark key="[" line="93" column="19" />
        <mark key="]" line="93" column="19" />
        <mark key="^" line="93" column="23" />
        <mark key="." line="93" column="19" />
      </file>
      <file name="C:/dev/git/ngrx-course/src/app/app.component.ts" timestamp="1546867159653">
        <mark key="[" line="9" column="27" />
        <mark key="]" line="9" column="27" />
        <mark key="^" line="9" column="10" />
        <mark key="." line="9" column="27" />
      </file>
      <file name="C:/dev/git/bartender/WebApp/src/app/comparison/models/job.objects.ts" timestamp="1548159556355">
        <mark key="[" line="145" column="13" />
        <mark key="]" line="145" column="12" />
        <mark key="." line="145" column="12" />
        <mark key="^" line="145" column="12" />
      </file>
      <file name="C:/dev/git/ngrx-course/src/app/home/home.component.css" timestamp="1546936849964">
        <mark key="[" line="2" column="1" />
        <mark key="]" line="14" column="45" />
        <mark key="^" line="14" column="45" />
        <mark key="." line="14" column="45" />
      </file>
      <file name="C:/dev/git/ngrx-course/shared/to/all-user-data.ts" timestamp="1546866171709">
        <mark key="[" line="5" column="0" />
        <mark key="]" line="5" column="0" />
        <mark key="." line="5" column="0" />
        <mark key="^" line="5" column="4" />
      </file>
      <file name="C:/dev/git/ngrx-course/src/assets/chatapp.css" timestamp="1546916817185">
        <mark key="[" line="22" column="7" />
        <mark key="]" line="22" column="10" />
        <mark key="^" line="22" column="10" />
        <mark key="." line="22" column="10" />
      </file>
      <file name="C:/dev/git/ngrx-course/src/app/message-list/message-list.component.html" timestamp="1546916557159">
        <mark key="[" line="0" column="23" />
        <mark key="]" line="0" column="23" />
        <mark key="^" line="0" column="29" />
        <mark key="." line="0" column="23" />
      </file>
      <file name="C:/dev/git/bartender/Buildsoft.Bartender.Api/Controllers/TradePackageLifecycle/TradePackageLifecycleController.Query.cs" timestamp="1545179775369">
        <mark key="[" line="40" column="48" />
        <mark key="]" line="39" column="12" />
        <mark key="." line="39" column="12" />
        <mark key="^" line="39" column="13" />
      </file>
      <file name="C:/dev/git/reactive-patterns-course-master/reactive-patterns-course-master/src/app/home/home.component.ts" timestamp="1546510909498">
        <mark key="[" line="29" column="4" />
        <mark key="]" line="29" column="3" />
        <mark key="^" line="29" column="3" />
        <mark key="." line="29" column="3" />
      </file>
      <file name="C:/dev/git/ngrx-course/src/app/app.module.ts" timestamp="1546938439667">
        <mark key="]" line="71" column="7" />
        <mark key="^" line="71" column="7" />
        <mark key="." line="71" column="7" />
      </file>
      <file name="C:/dev/git/rxjs-course/src/app/home/home.component.css" timestamp="1546765013471">
        <mark key="[" line="7" column="17" />
        <mark key="]" line="7" column="0" />
        <mark key="." line="7" column="0" />
        <mark key="^" line="7" column="0" />
      </file>
      <file name="C:/dev/git/bas-bartender-lambda/functions/BartenderQuoteValidator/function.json" timestamp="1548804963348">
        <mark key="[" line="4" column="42" />
        <mark key="]" line="6" column="25" />
        <mark key="." line="6" column="25" />
        <mark key="^" line="6" column="12" />
      </file>
      <file name="C:/dev/git/reactive-patterns-course-master/reactive-patterns-course-master/src/index.html" timestamp="1546132959951">
        <mark key="[" line="12" column="52" />
        <mark key="]" line="14" column="0" />
        <mark key="^" line="14" column="0" />
        <mark key="." line="14" column="0" />
      </file>
      <file name="C:/dev/git/bartender/WebApp/src/app/comparison/components/quote-progress-tracker/quote-progress-tracker.component.ts" timestamp="1548645769059">
        <mark key="[" line="69" column="5" />
        <mark key="]" line="71" column="11" />
        <mark key="^" line="71" column="11" />
        <mark key="." line="71" column="11" />
      </file>
      <file name="C:/dev/git/ngrx-course/src/app/store/ui-state.ts" timestamp="1546430506173">
        <mark key="[" line="23" column="28" />
        <mark key="]" line="23" column="28" />
        <mark key="." line="23" column="28" />
        <mark key="^" line="23" column="28" />
      </file>
      <file name="C:/dev/git/bartender/WebApp/src/app/shared/directives/auto-fixed-height.directive.ts" timestamp="1548651188996">
        <mark key="[" line="31" column="29" />
        <mark key="]" line="31" column="29" />
        <mark key="^" line="31" column="29" />
        <mark key="." line="31" column="29" />
      </file>
      <file name="$USER_HOME$/Downloads/util_vim_hotkey_0.4.1/viatc.ini" timestamp="1546697858829">
        <mark key="[" line="4" column="0" />
        <mark key="]" line="4" column="0" />
        <mark key="^" line="4" column="0" />
        <mark key="." line="4" column="0" />
      </file>
      <file name="C:/dev/git/ngrx-course/src/app/services/commonHttpHeaders.ts" timestamp="1546920177384">
        <mark key="[" line="7" column="3" />
        <mark key="]" line="6" column="40" />
        <mark key="^" line="6" column="40" />
        <mark key="." line="6" column="40" />
      </file>
      <file name="C:/dev/git/bartender/WebApp/src/app/comparison/components/job-tradepackage-life-cycle-item/job-tradepackage-life-cycle-item.component.ts" timestamp="1548649538703">
        <mark key="'" line="52" column="9" />
        <mark key="[" line="170" column="35" />
        <mark key="]" line="170" column="35" />
        <mark key="^" line="168" column="1" />
        <mark key="." line="170" column="35" />
      </file>
      <file name="C:/dev/git/ngrx-course/src/app/store/reducers/uiStateReducer.ts" timestamp="1546919531353">
        <mark key="[" line="44" column="23" />
        <mark key="]" line="44" column="23" />
        <mark key="^" line="44" column="29" />
        <mark key="." line="44" column="23" />
      </file>
      <file name="C:/dev/git/bartender/WebApp/src/app/comparison/components/profile-popup-password/profile-popup-password.component.ts" timestamp="1548593028569">
        <mark key="]" line="83" column="1" />
        <mark key="^" line="83" column="1" />
        <mark key="." line="83" column="1" />
      </file>
      <file name="C:/dev/git/bartender/WebApp/src/app/comparison/models/user-preference.object.ts" timestamp="1548639180197">
        <mark key="[" line="21" column="35" />
        <mark key="]" line="21" column="35" />
        <mark key="^" line="21" column="35" />
        <mark key="." line="21" column="35" />
      </file>
      <file name="C:/dev/git/bas-bartender-lambda/functions/BartenderQuoteValidator/index.js" timestamp="1548805214866">
        <mark key="'" line="1433" column="17" />
        <mark key="[" line="1488" column="0" />
        <mark key="]" line="1488" column="0" />
        <mark key="." line="1488" column="0" />
      </file>
      <file name="C:/dev/git/ngrx-course/src/app/thread-section/userNameSelector.ts" timestamp="1546938678266">
        <mark key="]" line="4" column="0" />
        <mark key="^" line="4" column="1" />
        <mark key="." line="4" column="0" />
      </file>
      <file name="C:/AutoHotkey/HotKey.ahk" timestamp="1548540388904">
        <mark key="'" line="206" column="0" />
        <mark key="[" line="6" column="0" />
        <mark key="]" line="6" column="0" />
        <mark key="." line="6" column="0" />
        <mark key="^" line="6" column="0" />
      </file>
      <file name="C:/dev/git/ngrx-course/src/app/thread-section/thread-section.component.ts" timestamp="1546937622644">
        <mark key="]" line="25" column="3" />
        <mark key="^" line="25" column="3" />
        <mark key="." line="25" column="3" />
      </file>
      <file name="C:/dev/git/bartender/WebApp/src/app/comparison/components/job-tradepackages-life-cycle/job-tradepackages-life-cycle.component.html" timestamp="1548650230759">
        <mark key="'" line="7" column="44" />
        <mark key="[" line="1" column="100" />
        <mark key="]" line="1" column="100" />
        <mark key="^" line="1" column="14" />
        <mark key="." line="1" column="100" />
      </file>
      <file name="C:/dev/git/ngrx-course/src/app/messages/messages.component.html" timestamp="1546867336397">
        <mark key="[" line="2" column="61" />
        <mark key="]" line="3" column="3" />
        <mark key="^" line="3" column="3" />
        <mark key="." line="3" column="3" />
      </file>
      <file name="C:/dev/git/ngrx-course/src/app/app.component.css" timestamp="1546917175796">
        <mark key="[" line="14" column="12" />
        <mark key="]" line="14" column="12" />
        <mark key="^" line="14" column="12" />
        <mark key="." line="14" column="12" />
      </file>
      <file name="C:/dev/git/ngrx-course/src/app/store/effects/server-notifications-effect.service.ts" timestamp="1546869285572">
        <mark key="[" line="17" column="0" />
        <mark key="]" line="20" column="19" />
        <mark key="^" line="20" column="19" />
        <mark key="." line="20" column="19" />
      </file>
      <file name="C:/dev/git/bartender/WebApp/src/app/comparison/components/quote-progress-tracker/quote-progress-tracker.component.html" timestamp="1548644383555">
        <mark key="[" line="22" column="11" />
        <mark key="]" line="24" column="71" />
        <mark key="." line="24" column="71" />
        <mark key="^" line="24" column="71" />
      </file>
      <file name="C:/dev/git/ngrx-course/src/app/user-selection/user-selection.component.html" timestamp="1546931163448">
        <mark key="[" line="4" column="26" />
        <mark key="]" line="4" column="28" />
        <mark key="." line="4" column="28" />
        <mark key="^" line="4" column="28" />
      </file>
      <file name="C:/dev/git/ngrx-course/node_modules/@ngrx/store/src/models.d.ts" timestamp="1546430137014">
        <mark key="[" line="0" column="17" />
        <mark key="]" line="9" column="5" />
        <mark key="^" line="9" column="5" />
        <mark key="." line="9" column="5" />
      </file>
      <file name="$USER_HOME$/AppData/Roaming/npm-cache/_logs/2019-01-28T10_51_38_782Z-debug.log" timestamp="1548672785262">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="C:/dev/git/ngrx-course/src/app/about/about1.component.ts" timestamp="1546260835912">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="1" />
        <mark key="." line="0" column="1" />
        <mark key="^" line="0" column="1" />
      </file>
      <file name="C:/dev/git/bartender/WebApp/src/app/services/supplier-guard.service.ts" timestamp="1548636932552">
        <mark key="[" line="37" column="32" />
        <mark key="]" line="37" column="32" />
        <mark key="^" line="37" column="32" />
        <mark key="." line="37" column="32" />
      </file>
      <file name="C:/aws/credentials" timestamp="1548803975178">
        <mark key="[" line="11" column="43" />
        <mark key="]" line="11" column="43" />
        <mark key="^" line="11" column="42" />
        <mark key="." line="11" column="43" />
      </file>
      <file name="C:/dev/git/ngrx-course/src/app/chat-message/chat-message.component.html" timestamp="1546866830787">
        <mark key="[" line="0" column="64" />
        <mark key="]" line="2" column="64" />
        <mark key="^" line="2" column="64" />
        <mark key="." line="2" column="64" />
      </file>
      <file name="C:/dev/git/ngrx-course/src/app/home/home.component.html" timestamp="1546932696358">
        <mark key="[" line="3" column="47" />
        <mark key="]" line="3" column="33" />
        <mark key="." line="3" column="33" />
        <mark key="^" line="3" column="33" />
      </file>
      <file name="C:/dev/git/bas-bartender-lambda/project.json" timestamp="1548801318486">
        <mark key="[" line="4" column="13" />
        <mark key="]" line="4" column="13" />
        <mark key="^" line="4" column="13" />
        <mark key="." line="4" column="13" />
      </file>
      <file name="C:/dev/git/bartender/Buildsoft.Bartender.Api.Model/TradePackagesLifecycle/TradePackageLifecycleSupplierResponse.cs" timestamp="1545178833807">
        <mark key="[" line="20" column="21" />
        <mark key="]" line="20" column="44" />
        <mark key="^" line="20" column="44" />
        <mark key="." line="20" column="44" />
      </file>
      <file name="C:/dev/git/ngrx-course/src/app/shared/mapping/buildThreadParticipantsList.ts" timestamp="1546405321155">
        <mark key="[" line="11" column="21" />
        <mark key="]" line="11" column="20" />
        <mark key="^" line="11" column="20" />
        <mark key="." line="11" column="20" />
      </file>
      <file name="C:/dev/git/reactive-patterns-course-master/reactive-patterns-course-master/src/app/course/course.component.html" timestamp="1546176538424">
        <mark key="[" line="16" column="30" />
        <mark key="]" line="16" column="27" />
        <mark key="^" line="16" column="27" />
        <mark key="." line="16" column="27" />
      </file>
      <file name="C:/dev/git/reactive-patterns-course-master/reactive-patterns-course-master/src/app/all-lessons/all-lessons.component.ts" timestamp="1546179952201">
        <mark key="[" line="13" column="17" />
        <mark key="]" line="13" column="17" />
        <mark key="." line="13" column="17" />
        <mark key="^" line="13" column="17" />
      </file>
      <file name="/Dummy.txt" timestamp="1547698382632">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
        <mark key="^" line="0" column="0" />
      </file>
      <file name="C:/dev/git/ngrx-course/src/app/user-selection/user-selection.component.ts" timestamp="1546918832999">
        <mark key="[" line="17" column="36" />
        <mark key="]" line="17" column="3" />
        <mark key="^" line="17" column="3" />
        <mark key="." line="17" column="3" />
      </file>
      <file name="C:/dev/git/ngrx-course/src/app/store/effects/write-new-message-effect.service.ts" timestamp="1546869766455">
        <mark key="[" line="22" column="40" />
        <mark key="]" line="22" column="37" />
        <mark key="." line="22" column="37" />
        <mark key="^" line="22" column="37" />
      </file>
      <file name="C:/dev/git/ngrx-course/src/app/store/actions.ts" timestamp="1546918799388">
        <mark key="[" line="55" column="2" />
        <mark key="]" line="55" column="14" />
        <mark key="." line="55" column="14" />
        <mark key="^" line="55" column="14" />
      </file>
      <file name="C:/dev/git/ngrx-course/src/app/store/reducers/uiStoreDataReducer.ts" timestamp="1546939534184">
        <mark key="[" line="23" column="52" />
        <mark key="]" line="23" column="51" />
        <mark key="." line="23" column="51" />
        <mark key="^" line="23" column="51" />
      </file>
      <file name="C:/dev/git/rxjs-course/src/app/model/courses/course.object.ts" timestamp="1546767447661">
        <mark key="[" line="0" column="11" />
        <mark key="]" line="0" column="11" />
        <mark key="^" line="0" column="11" />
        <mark key="." line="0" column="44" />
      </file>
      <file name="C:/dev/git/rxjs-course/server/server.ts" timestamp="1546846522064">
        <mark key="[" line="28" column="12" />
        <mark key="]" line="29" column="91" />
        <mark key="^" line="29" column="91" />
        <mark key="." line="29" column="91" />
      </file>
      <file name="C:/dev/git/bartender/Buildsoft.Bartender.Entities/TradePackagesLifecycle/TradePackageLifecycleSupplier.cs" timestamp="1545178550516">
        <mark key="[" line="5" column="0" />
        <mark key="]" line="14" column="5" />
        <mark key="." line="5" column="7" />
        <mark key="^" line="5" column="7" />
      </file>
      <file name="C:/dev/git/rxjs-course/LICENSE" timestamp="1546840939907">
        <mark key="[" line="8" column="14" />
        <mark key="]" line="9" column="23" />
        <mark key="^" line="9" column="23" />
        <mark key="." line="9" column="23" />
      </file>
      <file name="C:/dev/git/reactive-patterns-course-master/reactive-patterns-course-master/src/app/home/home.component.html" timestamp="1546510342495">
        <mark key="[" line="9" column="2" />
        <mark key="]" line="10" column="0" />
        <mark key="^" line="10" column="16" />
        <mark key="." line="8" column="35" />
      </file>
      <file name="C:/dev/git/rxjs-course/src/app/app-routing.module.ts" timestamp="1546740494172">
        <mark key="[" line="27" column="27" />
        <mark key="]" line="27" column="28" />
        <mark key="^" line="27" column="38" />
        <mark key="." line="27" column="28" />
      </file>
      <file name="C:/dev/git/bartender/WebApp/src/app/comparison/components/job-tradepackage-life-cycle-item/job-tradepackage-life-cycle-item.component.html" timestamp="1548649518327">
        <mark key="'" line="55" column="181" />
        <mark key="[" line="55" column="166" />
        <mark key="]" line="46" column="37" />
        <mark key="^" line="46" column="37" />
        <mark key="." line="55" column="178" />
      </file>
      <file name="C:/dev/git/ngrx-course/src/app/message-section/messageParticipantNamesSelector.ts" timestamp="1546405116482">
        <mark key="[" line="7" column="23" />
        <mark key="]" line="7" column="30" />
        <mark key="^" line="7" column="30" />
        <mark key="." line="7" column="30" />
      </file>
      <file name="C:/dev/git/bartender/WebApp/src/app/comparison/components/job-tradepackages-life-cycle/job-tradepackages-life-cycle.component.ts" timestamp="1548650186286">
        <mark key="'" line="123" column="20" />
        <mark key="[" line="45" column="14" />
        <mark key="]" line="45" column="38" />
        <mark key="." line="45" column="1" />
        <mark key="^" line="45" column="1" />
      </file>
      <file name="C:/dev/git/rxjs-course/src/app/courses-card-list/courses-card-list.component.css" timestamp="1546574983767">
        <mark key="[" line="18" column="0" />
        <mark key="]" line="18" column="0" />
        <mark key="^" line="18" column="0" />
        <mark key="." line="18" column="0" />
      </file>
      <file name="C:/dev/git/bartender/WebApp/src/app/comparison/components/profile-popup-password/profile-popup-password.component.html" timestamp="1548589910472">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="C:/dev/git/ngrx-course/src/app/store/utils.ts" timestamp="1546950308843">
        <mark key="[" line="17" column="1" />
        <mark key="]" line="24" column="1" />
        <mark key="^" line="24" column="1" />
        <mark key="." line="24" column="1" />
      </file>
      <file name="C:/dev/git/bartender/Resources/database/InitDatabase.sql" timestamp="1547977624030">
        <mark key="[" line="12" column="0" />
        <mark key="]" line="12" column="23" />
      </file>
      <file name="C:/dev/git/rxjs-course/src/app/common4/store.service.ts" timestamp="1546742934059">
        <mark key="[" line="3" column="23" />
        <mark key="]" line="3" column="19" />
        <mark key="^" line="3" column="19" />
        <mark key="." line="3" column="19" />
      </file>
    </filemarks>
    <jumps>
      <jump line="0" column="0" filename="$USER_HOME$/.viminfo" />
      <jump line="323" column="4" filename="$USER_HOME$/.viminfo" />
      <jump line="2" column="16" filename="$USER_HOME$/.ideavimrc" />
      <jump line="3" column="11" filename="C:/dev/git/bartender/WebApp/src/app/comparison/components/job-tradepackages-grid/job-tradepackages-grid.component.ts" />
      <jump line="336" column="35" filename="C:/dev/git/bartender/WebApp/src/app/comparison/components/job-tradepackages-grid/job-tradepackages-grid.component.ts" />
      <jump line="36" column="2" filename="C:/dev/git/bartender/WebApp/src/app/comparison/components/job-tradepackages-grid/job-tradepackages-grid.component.ts" />
      <jump line="604" column="33" filename="C:/dev/git/bartender/WebApp/src/app/comparison/components/job-tradepackages-grid/job-tradepackages-grid.component.ts" />
      <jump line="623" column="34" filename="C:/dev/git/bartender/WebApp/src/app/comparison/components/job-tradepackages-grid/job-tradepackages-grid.component.ts" />
      <jump line="28" column="0" filename="C:/dev/git/bartender/WebApp/src/app/comparison/services/trade-package-life-cycle.service.ts" />
      <jump line="610" column="34" filename="C:/dev/git/bartender/WebApp/src/app/comparison/components/job-tradepackages-grid/job-tradepackages-grid.component.ts" />
      <jump line="619" column="66" filename="C:/dev/git/bartender/WebApp/src/app/comparison/components/job-tradepackages-grid/job-tradepackages-grid.component.ts" />
      <jump line="603" column="6" filename="C:/dev/git/bartender/WebApp/src/app/comparison/components/job-tradepackages-grid/job-tradepackages-grid.component.ts" />
      <jump line="607" column="8" filename="C:/dev/git/bartender/WebApp/src/app/comparison/components/job-tradepackages-grid/job-tradepackages-grid.component.ts" />
      <jump line="609" column="28" filename="C:/dev/git/bartender/WebApp/src/app/comparison/components/job-tradepackages-grid/job-tradepackages-grid.component.ts" />
      <jump line="611" column="39" filename="C:/dev/git/bartender/WebApp/src/app/comparison/components/job-tradepackages-grid/job-tradepackages-grid.component.ts" />
      <jump line="612" column="12" filename="C:/dev/git/bartender/WebApp/src/app/comparison/components/job-tradepackages-grid/job-tradepackages-grid.component.ts" />
      <jump line="65" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="82" column="1" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="155" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="173" column="5" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="172" column="33" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="174" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="177" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="180" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="183" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="186" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="189" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="192" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="1" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="2" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="3" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="5" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="6" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="21" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="24" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="27" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="30" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="33" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="36" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="39" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="42" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="45" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="48" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="54" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="57" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="60" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="63" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="66" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="69" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="76" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="112" column="4" filename="C:/dev/git/bartender/WebApp/src/app/comparison/components/job-tradepackages-life-cycle/job-tradepackages-life-cycle.component.ts" />
      <jump line="16" column="6" filename="C:/dev/git/bartender/WebApp/src/app/comparison/components/job-tradepackages-life-cycle/job-tradepackages-life-cycle.component.html" />
      <jump line="97" column="4" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="99" column="4" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="72" column="3" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="51" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="29" column="5" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="15" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="113" column="19" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="91" column="3" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="127" column="29" filename="C:/dev/git/bartender/WebApp/src/app/comparison/components/job-tradepackages-life-cycle/job-tradepackages-life-cycle.component.ts" />
      <jump line="35" column="0" filename="C:/dev/git/bartender/WebApp/src/app/comparison/components/job-tradepackages-life-cycle/job-tradepackages-life-cycle.component.ts" />
      <jump line="0" column="0" filename="C:/dev/git/bartender/WebApp/src/app/comparison/components/job-tradepackages-life-cycle/job-tradepackages-life-cycle.component.ts" />
      <jump line="146" column="3" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="0" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="201" column="0" filename="C:/AutoHotkey/HotKey.ahk" />
      <jump line="0" column="0" filename="C:/dev/git/bartender/WebApp/src/app/comparison/components/profile-popup-password/profile-popup-password.component.html" />
      <jump line="122" column="2" filename="C:/dev/git/bartender/WebApp/src/app/comparison/components/profile-popup-password/profile-popup-password.component.ts" />
      <jump line="40" column="0" filename="C:/dev/git/bartender/WebApp/src/app/comparison/components/job-tradepackage-life-cycle-item/job-tradepackage-life-cycle-item.component.ts" />
      <jump line="213" column="103" filename="C:/dev/git/bartender/WebApp/src/app/comparison/components/job-tradepackage-life-cycle-item/job-tradepackage-life-cycle-item.component.ts" />
      <jump line="78" column="9" filename="C:/dev/git/bartender/WebApp/src/app/comparison/components/job-tradepackage-life-cycle-item/job-tradepackage-life-cycle-item.component.ts" />
      <jump line="55" column="181" filename="C:/dev/git/bartender/WebApp/src/app/comparison/components/job-tradepackage-life-cycle-item/job-tradepackage-life-cycle-item.component.html" />
      <jump line="115" column="20" filename="C:/dev/git/bartender/WebApp/src/app/comparison/components/job-tradepackages-life-cycle/job-tradepackages-life-cycle.component.ts" />
      <jump line="7" column="44" filename="C:/dev/git/bartender/WebApp/src/app/comparison/components/job-tradepackages-life-cycle/job-tradepackages-life-cycle.component.html" />
      <jump line="1520" column="33" filename="C:/dev/git/bas-bartender-lambda/functions/BartenderQuoteValidator/index.js" />
      <jump line="17" column="8" filename="C:/dev/git/bas-bartender-lambda/functions/BartenderQuoteValidator/index.js" />
      <jump line="1382" column="12" filename="C:/dev/git/bas-bartender-lambda/functions/BartenderQuoteValidator/index.js" />
      <jump line="1405" column="24" filename="C:/dev/git/bas-bartender-lambda/functions/BartenderQuoteValidator/index.js" />
      <jump line="1410" column="20" filename="C:/dev/git/bas-bartender-lambda/functions/BartenderQuoteValidator/index.js" />
      <jump line="1517" column="13" filename="C:/dev/git/bas-bartender-lambda/functions/BartenderQuoteValidator/index.js" />
      <jump line="1221" column="20" filename="C:/dev/git/bas-bartender-lambda/functions/BartenderQuoteValidator/index.js" />
      <jump line="1523" column="21" filename="C:/dev/git/bas-bartender-lambda/functions/BartenderQuoteValidator/index.js" />
      <jump line="19" column="8" filename="C:/dev/git/bas-bartender-lambda/functions/BartenderQuoteValidator/index.js" />
      <jump line="1378" column="17" filename="C:/dev/git/bas-bartender-lambda/functions/BartenderQuoteValidator/index.js" />
      <jump line="1519" column="13" filename="C:/dev/git/bas-bartender-lambda/functions/BartenderQuoteValidator/index.js" />
      <jump line="1312" column="26" filename="C:/dev/git/bas-bartender-lambda/functions/BartenderQuoteValidator/index.js" />
      <jump line="0" column="0" filename="$USER_HOME$/AppData/Roaming/npm-cache/_logs/2019-01-28T10_51_38_782Z-debug.log" />
      <jump line="22" column="25" filename="C:/dev/git/bas-bartender-lambda/functions/BartenderQuoteValidator/index.js" />
      <jump line="1" column="0" filename="C:/dev/git/bas-bartender-lambda/functions/BartenderQuoteValidator/index.js" />
      <jump line="1533" column="0" filename="C:/dev/git/bas-bartender-lambda/functions/BartenderQuoteValidator/index.js" />
      <jump line="1532" column="0" filename="C:/dev/git/bas-bartender-lambda/functions/BartenderQuoteValidator/index.js" />
      <jump line="1385" column="58" filename="C:/dev/git/bas-bartender-lambda/functions/BartenderQuoteValidator/index.js" />
      <jump line="2" column="23" filename="C:/dev/git/bas-bartender-lambda/functions/BartenderQuoteValidator/index.js" />
      <jump line="1539" column="0" filename="C:/dev/git/bas-bartender-lambda/functions/BartenderQuoteValidator/index.js" />
      <jump line="0" column="0" filename="C:/dev/git/bas-bartender-lambda/functions/BartenderQuoteValidator/index.js" />
      <jump line="1527" column="27" filename="C:/dev/git/bas-bartender-lambda/functions/BartenderQuoteValidator/index.js" />
      <jump line="20" column="23" filename="C:/dev/git/bas-bartender-lambda/functions/BartenderQuoteValidator/index.js" />
      <jump line="21" column="40" filename="C:/dev/git/bas-bartender-lambda/functions/BartenderQuoteValidator/index.js" />
      <jump line="1522" column="9" filename="C:/dev/git/bas-bartender-lambda/functions/BartenderQuoteValidator/index.js" />
      <jump line="1433" column="17" filename="C:/dev/git/bas-bartender-lambda/functions/BartenderQuoteValidator/index.js" />
    </jumps>
    <registers>
      <register name="a" type="4">
        <text>3jr#</text>
      </register>
      <register name="&quot;" type="4">
        <text>1</text>
      </register>
      <register name="b" type="4">
        <text>GroupBy</text>
      </register>
      <register name="d" type="4">
        <keys>
          <key char="106" code="0" mods="0" />
          <key char="105" code="0" mods="0" />
          <key char="116" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="98" code="0" mods="0" />
        </keys>
      </register>
      <register name="f" type="4">
        <text />
      </register>
      <register name="i" type="4">
        <text>tradePackageItem</text>
      </register>
      <register name="l" type="4">
        <text>quoteLifecycleId</text>
      </register>
      <register name="-" type="4">
        <text>thomas</text>
      </register>
      <register name="/" type="4">
        <text>thomas</text>
      </register>
      <register name="0" type="4">
        <text>bartender-prod</text>
      </register>
      <register name="p" type="4">
        <text>public</text>
      </register>
      <register name="1" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgICdiYXJ0ZW5kZXJ0ZWFtQGJ1aWxkc29mdC5jb20uYXUnCg==</text>
      </register>
      <register name="2" type="2">
        <text encoding="base64">ICAgIC8vVE9ETzogQ2hhbmdlIGl0IGJhY2sgdG8gYmFydGVuZGVyLXByb2QK</text>
      </register>
      <register name="r" type="4">
        <text>Repository</text>
      </register>
      <register name="3" type="2">
        <text encoding="base64">ICAiZGVzY3JpcHRpb24iOiAibGFtYmRhIGZ1bmN0aW9uIGZvciBiYXJ0ZW5kZXIgYXV0byBzY2FsZSBpbmZyYXN0cnVjdHVyZSIsCiAgIm1lbW9yeSI6IDEyOCwKICAidGltZW91dCI6IDg1LAogICJyb2xlIjogImFybjphd3M6aWFtOjo3ODI5ODE2MzgwNzY6cm9sZS9iYXNfbGFtYmRhX2Z1bmN0aW9uIiwKICAiZW52aXJvbm1lbnQiOiB7fQo=</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">ICAiZGVzY3JpcHRpb24iOiAibGFtYmRhIGZ1bmN0aW9uIGZvciBiYXJ0ZW5kZXIgYXV0byBzY2FsZSBpbmZyYXN0cnVjdHVyZSIsCiAgIm1lbW9yeSI6IDEyOCwKICAidGltZW91dCI6IDg1LAogICJyb2xlIjogImFybjphd3M6aWFtOjo3ODI5ODE2MzgwNzY6cm9sZS9iYXNfbGFtYmRhX2Z1bmN0aW9uIiwKICAiZW52aXJvbm1lbnQiOiB7fQp9Cg==</text>
      </register>
      <register name="t" type="4">
        <text>TradePackag</text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">ZXhwb3J0cy5oYW5kbGUgPSAgZnVuY3Rpb24oZXZlbnQsIGNvbnRleHQsIGNhbGxiYWNrKSB7CiAgICBjb25zb2xlLmxvZygnc3RhcnQgQmFydGVuZGVyIFF1b3RlIFZhbGlkYXRvciBGdW5jdGlvbicpOwo=</text>
      </register>
      <register name="6" type="2">
        <text encoding="base64">Ci8vIH0K</text>
      </register>
      <register name="7" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="8" type="4">
        <text encoding="base64"></text>
      </register>
      <register name="9" type="4">
        <text>{
        var request = {
            ACL: 'private',
            Body: JSON.stringify(mismatchData),
            //TODO: Change it back to bartender-prod
            Bucket: 'bartender-staging',
            Key: 'live_stat/total_mismatch_data.json'
        };
        s3.putObject(request, function (err, data) {
            if (err) throw err;
            console.log('Data saved successfully');
        });
  
}</text>
      </register>
      <register name=":" type="4">
        <text>set relativenumber</text>
      </register>
    </registers>
    <search>
      <last-search>thomas</last-search>
      <last-offset />
      <last-pattern>thomas</last-pattern>
      <last-replace>Id1</last-replace>
      <last-substitute>CourseType</last-substitute>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search>
        <entry encoding="base64">XDxSZXBsYWNlUXVvdGVBbW91bnRSZXF1ZXN0XD4=</entry>
        <entry encoding="base64">XDxhZnRlclNldENlbGxNZXRhXD4=</entry>
        <entry>activeElement</entry>
        <entry>#p</entry>
        <entry>#+</entry>
        <entry>#</entry>
        <entry>r</entry>
        <entry>#r</entry>
        <entry>F2</entry>
        <entry>Home</entry>
        <entry>y</entry>
        <entry>message</entry>
        <entry>jobTradePackage</entry>
        <entry>tradePackageLifeCycleList</entry>
        <entry encoding="base64">XDxtaXNtYXRjaERhdGFcPg==</entry>
        <entry>bartender-staging</entry>
        <entry encoding="base64">XDxyZXF1ZXN0XD4=</entry>
        <entry encoding="base64">XDxwcm9kXD4=</entry>
        <entry encoding="base64">XDxwdXNoUmVjb3JkVG9GaWxlXD4=</entry>
        <entry>thomas</entry>
      </history-search>
      <history-cmd>
        <entry>show ln</entry>
        <entry>set ;m</entry>
        <entry>set ln</entry>
        <entry>set nu</entry>
        <entry>set autoindent</entry>
        <entry>autoindent</entry>
        <entry>set noerrorbells</entry>
        <entry>set noerrorbell</entry>
        <entry>set showmode</entry>
        <entry>reg</entry>
        <entry>-16,-8 co.</entry>
        <entry>51,56s/Id/Id1/gc</entry>
        <entry encoding="base64">bWFwIA==</entry>
        <entry>nnoremap S diw&quot;0P</entry>
        <entry>wq</entry>
        <entry>w</entry>
        <entry>set showrelativenumber</entry>
        <entry>show number</entry>
        <entry>set number</entry>
        <entry>set relativenumber</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed B</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed H</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed N</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed W</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed OPEN_BRACKET</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed X</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed S</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed E</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed Q</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed M</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed Y</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed G</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed P</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed T</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed 2</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed CLOSE_BRACKET</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed O</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>